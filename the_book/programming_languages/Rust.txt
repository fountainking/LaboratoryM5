**RUST**

Category: Programming_Languages
---------------------------------------

**RUST**

Category: Programming_Languages
---------------------------------------

**RUST PROGRAMMING - COMPREHENSIVE
**GUIDE****

Rust is a systems programming language
focused on safety, speed, and
concurrency. No garbage collector!

**INSTALLATION:**
```bash
curl --proto '=https' --tlsv1.2 -sSf
https://sh.rustup.rs | sh
rustc --version
cargo --version
```

**HELLO WORLD:**
```rust
fn main() {
println!("Hello, World!");
}
```

Compile: rustc main.rs
Run: ./main

Or with Cargo:
```bash
cargo new myproject
cargo run
cargo build --release
```

**VARIABLES:**
```rust
let x = 5; // Immutable
let mut y = 10; // Mutable
y = 20;

const MAX: u32 = 100_000;
```

**TYPES:**
```rust
let integer: i32 = 42;
let float: f64 = 3.14;
let boolean: bool = true;
let character: char = 'A';
let string: &str = "Hello";
let owned_string: String =
String::from("Hello");
```

**FUNCTIONS:**
```rust
fn add(a: i32, b: i32) -> i32 {
a + b // No semicolon = return
}

fn greet(name: &str) {
println!("Hello, {}!", name);
}
```

**OWNERSHIP:**
```rust
let s1 = String::from("hello");
let s2 = s1; // s1 is MOVED, no longer
valid

// To keep s1 valid:
let s3 = s1.clone();

// References (borrowing)
let s4 = &s1; // Immutable borrow
let s5 = &mut s1; // Mutable borrow
(only one at a time)
```

**STRUCTS:**
```rust
struct Person {
name: String,
age: u8,
}

let person = Person {
name: String::from("John"),
age: 30,
};

// Methods
impl Person {
fn greet(&self) {
println!("Hi, I'm {}",
self.name);
}
}
```

**ENUMS:**
```rust
enum Direction {
North,
South,
East,
West,
}

let dir = Direction::North;

// With data
enum Message {
Quit,
Move { x: i32, y: i32 },
Write(String),
}
```

**OPTION & RESULT:**
```rust
// Option for nullable values
let some_number: Option<i32> = Some(5);
let no_number: Option<i32> = None;

if let Some(n) = some_number {
println!("Number: {}", n);
}

// Result for error handling
fn divide(a: f64, b: f64) ->
Result<f64, String> {
if b == 0.0 {
Err(String::from("Division by
zero"))
} else {
Ok(a / b)
}
}
```

**PATTERN MATCHING:**
```rust
match value {
1 => println!("One"),
2 => println!("Two"),
3..=9 => println!("3 to 9"),
_ => println!("Other"),
}
```

**VECTORS:**
```rust
let mut v = Vec::new();
v.push(1);
v.push(2);
v.push(3);

// Or with macro
let v2 = vec![1, 2, 3];

// Access
let third = &v[2];
```

**HASHMAP:**
```rust
use std::collections::HashMap;

let mut scores = HashMap::new();
scores.insert("Blue", 10);
scores.insert("Red", 50);

if let Some(score) = scores.get("Blue")
{
println!("Score: {}", score);
}
```

**LOOPS:**
```rust
// Loop
loop {
// infinite
break;
}

// While
while condition {
// code
}

// For
for i in 0..10 {
println!("{}", i);
}

for item in &vec {
println!("{}", item);
}
```

**ERROR HANDLING:**
```rust
// Propagate with ?
fn read_file() -> Result<String,
std::io::Error> {
let content =
std::fs::read_to_string("file.txt")?;
Ok(content)
}

// Unwrap (panics on error)
let content =
std::fs::read_to_string("file.txt").unwrap();
```

**TRAITS:**
```rust
trait Summary {
fn summarize(&self) -> String;
}

impl Summary for Article {
fn summarize(&self) -> String {
format!("{} by {}", self.title,
self.author)
}
}
```

**LIFETIMES:**
```rust
fn longest<'a>(x: &'a str, y: &'a str)
-> &'a str {
if x.len() > y.len() { x } else { y
}
}
```

**GENERICS:**
```rust
fn largest<T: PartialOrd>(list: &[T])
**-> &T {**
let mut largest = &list[0];
for item in list {
if item > largest {
largest = item;
}
}
largest
}
```

**CONCURRENCY:**
```rust
use std::thread;

let handle = thread::spawn(|| {
println!("Hello from thread");
});

handle.join().unwrap();
```

**FILE I/O:**
```rust
use std::fs;

// Write
fs::write("file.txt",
"Hello").unwrap();

// Read
let content =
fs::read_to_string("file.txt").unwrap();
```

**COMMON USE CASES:**
- Systems programming
- Web Assembly
- Embedded systems
- Game engines
- CLI tools
- High-performance servers

**BEST PRACTICES:**
- Let compiler enforce safety
- Use Result/Option, not panic
- Prefer borrowing over ownership
transfer
- Use cargo for project management
- Write tests
- Read compiler errors carefully
- Use clippy for lints

**CARGO COMMANDS:**
```bash
cargo new project_name
cargo build
cargo run
cargo test
cargo doc --open
cargo clippy
```

=======================================
**RELATED ARTICLES:**

• Java Reference
• Index
• Javascript Reference
• R Programming
• Ruby


=======================================
Processed: 2025-10-20 06:09
Words: ~656
Category: Programming_Languages

=======================================
**RELATED ARTICLES:**

• Java Reference
• Index
• Javascript Reference
• R Programming
• Ruby


=======================================
Processed: 2025-10-20 10:57
Words: ~684
Category: Programming_Languages

<!-- FORMATTED: 767d13a4 -->
