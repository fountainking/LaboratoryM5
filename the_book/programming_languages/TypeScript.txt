**TYPESCRIPT**

Category: Programming_Languages
---------------------------------------

**TYPESCRIPT**

Category: Programming_Languages
---------------------------------------

**TYPESCRIPT PROGRAMMING GUIDE**

**COMPREHENSIVE TYPESCRIPT REFERENCE**

**OVERVIEW:**
TypeScript is a typed superset of
JavaScript that compiles to plain
JavaScript. Developed by Microsoft,
adds static typing and modern features.

**BASIC SYNTAX:**

**HELLO WORLD:**
```typescript
console.log("Hello World!");
```

**BASIC TYPES:**
```typescript
let name: string = "John";
let age: number = 25;
let isActive: boolean = true;
let numbers: number[] = [1, 2, 3];
let tuple: [string, number] = ["John",
30];
```

**TYPE INFERENCE:**
```typescript
let message = "Hello"; // Inferred as
string
let count = 0; // Inferred as
number
```

**FUNCTIONS:**
```typescript
function greet(name: string): string {
return `Hello, ${name}!`;
}

function add(a: number, b: number):
number {
return a + b;
}

// Arrow function
const multiply = (a: number, b:
number): number => a * b;

// Optional parameters
function greet(name: string, greeting?:
string): string {
return `${greeting || 'Hello'},
${name}`;
}

// Default parameters
function greet(name: string, greeting:
string = "Hello"): string {
return `${greeting}, ${name}`;
}
```

**INTERFACES:**
```typescript
interface Person {
name: string;
age: number;
email?: string; // Optional
}

const person: Person = {
name: "John",
age: 30
};

// Function interface
interface MathFunc {
(a: number, b: number): number;
}

const add: MathFunc = (a, b) => a + b;
```

**CLASSES:**
```typescript
class Person {
private name: string;
public age: number;

constructor(name: string, age:
number) {
this.name = name;
this.age = age;
}

public display(): void {
console.log(`${this.name}:
${this.age}`);
}
}

// Inheritance
class Employee extends Person {
private salary: number;

constructor(name: string, age:
number, salary: number) {
super(name, age);
this.salary = salary;
}
}
```

**GENERICS:**
```typescript
function identity<T>(arg: T): T {
return arg;
}

let output = identity<string>("Hello");

// Generic class
class Box<T> {
private value: T;

constructor(value: T) {
this.value = value;
}

getValue(): T {
return this.value;
}
}
```

**UNION TYPES:**
```typescript
let value: string | number;
value = "Hello";
value = 42;

function print(value: string | number):
void {
if (typeof value === "string") {
console.log(value.toUpperCase());
} else {
console.log(value.toFixed(2));
}
}
```

**TYPE ALIASES:**
```typescript
type ID = string | number;
type User = {
id: ID;
name: string;
email: string;
};

const user: User = {
id: 1,
name: "John",
email: "john@example.com"
};
```

**ENUMS:**
```typescript
enum Direction {
North,
South,
East,
West
}

let heading: Direction =
Direction.North;

// String enum
enum Status {
Active = "ACTIVE",
Inactive = "INACTIVE"
}
```

**TYPE GUARDS:**
```typescript
function isString(value: any): value is
string {
return typeof value === "string";
}

if (isString(value)) {
console.log(value.toUpperCase());
}
```

**MODULES:**
```typescript
// Export
export interface User {
name: string;
}

export function greet(name: string):
string {
return `Hello, ${name}`;
}

// Import
import { User, greet } from './module';
```

**ASYNC/AWAIT:**
```typescript
async function fetchData():
Promise<string> {
const response = await
fetch('https://api.example.com');
const data = await response.json();
return data;
}
```

**COMMON USE CASES:**
- Large-scale applications
- React/Angular/Vue projects
- Node.js backends
- Library development
- Enterprise applications

**COMPILATION:**
```
tsc program.ts
node program.js
```

**BEST PRACTICES:**
- Enable strict mode
- Use interfaces for objects
- Prefer const over let
- Use type inference when possible
- Avoid 'any' type
- Use generics for reusable code

=======================================
**RELATED ARTICLES:**

• Rust
• Java Reference
• Index
• Javascript Reference
• R Programming


=======================================
Processed: 2025-10-20 06:09
Words: ~529
Category: Programming_Languages

=======================================
**RELATED ARTICLES:**

• Rust
• Java Reference
• Index
• Javascript Reference
• R Programming


=======================================
Processed: 2025-10-20 10:57
Words: ~557
Category: Programming_Languages

<!-- FORMATTED: 767d13a4 -->
